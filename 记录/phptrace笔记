CTRL_IS_ACTIVE()    pt_ctrl_is_active(&PTG(ctrl), PTG(pid))


obtain_zend_function  获取zend函数
filter_frame   按功能和类名过滤框架
frame_build帧的追踪操作
request_build跟踪请求操作 	 RSHUTDOWN
request_send   			RSHUTDOWN
status_build跟踪状态的操作
status_send
repr_zval追踪杂项功能
handle_error
handle_command			RINIT   发送数据到共享内存
pt_execute_core跟踪执行器替换



frame_set_retval
frame_send

这四个函数调用pt_execute_core
static void (*ori_execute_ex)(zend_execute_data *execute_data);
static void (*ori_execute_internal)(zend_execute_data *execute_data, zval *return_value);
ZEND_API void pt_execute_ex(zend_execute_data *execute_data);
ZEND_API void pt_execute_internal(zend_execute_data *execute_data, zval *return_value);

STD_PHP_INI_ENTRY






union _zend_function {
	zend_uchar type;	/* MUST be the first element of this struct! */
	uint32_t   quick_arg_flags;

	struct {
		zend_uchar type;  /* never used */
		zend_uchar arg_flags[3]; /* bitset of arg_info.pass_by_reference */
		uint32_t fn_flags;
		zend_string *function_name;
		zend_class_entry *scope;
		union _zend_function *prototype;
		uint32_t num_args;
		uint32_t required_num_args;
		zend_arg_info *arg_info;
	} common;

	zend_op_array op_array;
	zend_internal_function internal_function;
};


struct _zend_execute_data {
	const zend_op       *opline;           /* executed opline                */
	zend_execute_data   *call;             /* current call                   */
	zval                *return_value;
	zend_function       *func;             /* executed function              */
	zval                 This;             /* this + call_info + num_args    */
	zend_execute_data   *prev_execute_data;
	zend_array          *symbol_table;
#if ZEND_EX_USE_RUN_TIME_CACHE
	void               **run_time_cache;   /* cache op_array->run_time_cache */
#endif
#if ZEND_EX_USE_LITERALS
	zval                *literals;         /* cache op_array->literals       */
#endif
};

sds是char类型
typedef struct {
    uint8_t type;               /* request type, begin or end */
    sds sapi;                   /* sapi name eg: fpm-fcgi */
    sds script;                 /* request script */
    int64_t time;               /* request time */

    sds method;                 /* request method */
    sds uri;                    /* request uri */

    int argc;                   /* arguments part, available in cli */
    sds *argv;
} pt_request_t;


php_trace_init_globals函数做了一些全局变量初始化
trace全局变量
    zend_bool               enable;
    long                    dotrace;        /* flags of trace */

    char                    *data_dir;      /* data path, should be writable */

    pt_ctrl_t               ctrl;           /* ctrl module */
    char                    ctrl_file[256]; /* ctrl filename */

    int                     sock_fd;        /* comm socket */
    char                    sock_addr[256]; /* comm address */

    pid_t                   pid;            /* process id */
    long                    level;          /* nesting level */

    pt_request_t            request;        /* current request info */

    long                   *exc_time_table; /* exclusive time table */
    size_t                  exc_time_len;   /* length of time table */

    pt_filter_t             pft;            /* filter module */


typedef struct {
    pt_segment_t seg;
} pt_ctrl_t;

typedef struct {
    size_t size;
    void *addr;
} pt_segment_t;

typedef struct {
    uint8_t type;                          /* filter type */
    sds content;                           /* filter content */
}pt_filter_t;

pt_filter_t             pft; 

typedef struct {
    uint8_t type;               /* frame type, entry or exit */
    uint8_t functype;           /* function flags of PT_FUNC_xxx */

    uint32_t lineno;            /* entry lineno */
    sds filename;               /* entry filename */
    sds class;                  /* class name */
    sds function;               /* function name */
    uint32_t level;             /* nesting level */

    uint32_t arg_count;         /* arguments number */
    sds *args;                  /* arguments represent string */
    sds retval;                 /* return value represent string */

    int64_t inc_time;           /* inclusive wall time */
    int64_t exc_time;           /* exclusive wall time */
} pt_frame_t;

typedef char *sds;
