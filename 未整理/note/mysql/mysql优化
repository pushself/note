环境介绍：笔记本，4G内存，4核CPU，数据存储在机械硬盘
表结构：id int(11) not null
	name varchar(255) not null (随机生成长度为10的字符串)
	time int(11) not null （当前时间戳）
	code varchar(255) not null （随机生成长度为20-43的字符串）
	qq varchar(255) not null	（随机生成长度为10-15的字符串）
	phone varchar(255) not null	（随机生成长度为12的数字）
声明：当前表未设置主键以及其他外键约束等，id字段不是主键，但是值是唯一的;
一共创建了一千万条数据

创建大量测试数据库：
		1、编写php脚本随机生成随机熟据，每个字段的数据之间用`\t`符号
		2、LOAD DATA LOCAL INFILE '文件路径' INTO TABLE `表` ( `字段`);注：在linux系统下使用navicat工具，建议在mysql的控制台执行这条命令，因为linux版本的navicat使用的路径不一样


一、如果在查询一条记录的时候，已经知道只可能存在一条符合的数据（用户表，每个用户一条记录）那么应该加上limit提前终止扫描
优化前：select * from test where id = 1;  时间：12.91 sec
	select * from test where id = 100000;  时间：13.08 sec
优化后：select * from test where id = 1 limit;  时间：0.00 sec
	select * from test where id = 100000 limit;  时间：1.56 sec
结果：可以看出没有加`LIMIT 1`提前终止mysql会扫描整张表，所以优化前`id`值不管是多少mysql都会从上玩下扫描整张表，而优化后`id`值越大耗费事件越大，因为从上往下扫描到后便终止扫描。




单表优化：
一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题

字段
* 尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED 
* VARCHAR的长度只分配真正需要的空间 
* 使用枚举或整数代替字符串类型 
* 尽量使用TIMESTAMP而非DATETIME， 
* 单表不要有太多字段，建议在20以内 
* 避免使用NULL字段，很难查询优化且占用额外索引空间 
* 用整型来存IP


索引
* 索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDER BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描 
* 应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描 
* 值分布很稀少的字段不适合建索引，例如"性别"这种只有两三个值的字段 
* 字符字段只建前缀索引 
* 字符字段最好不要做主键 
* 不用外键，由程序保证约束 
* 尽量不用UNIQUE，由程序保证约束 
* 使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引

查询SQL
可通过开启慢查询日志来找出较慢的SQL

不做列运算：SELECT id WHERE age + 1 = 10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边

sql语句尽可能简单：一条sql只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大sql可以堵死整个库

不用SELECT *

OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内

不用函数和触发器，在应用程序实现

避免%xxx式查询

少用JOIN

使用同类型进行比较，比如用'123'和'123'比，123和123比

尽量避免在WHERE子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描

对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5

列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大

MyISAM
MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是：
* 不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁 
* 不支持事务 
* 不支持外键 
* 不支持崩溃后的安全恢复 
* 在表有读取查询的同时，支持往表中插入新纪录 
* 支持BLOB和TEXT的前500个字符索引，支持全文索引 
* 支持延迟更新索引，极大提升写入性能 
* 对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用 
InnoDB
InnoDB在MySQL 5.5后成为默认索引，它的特点是：
* 支持行锁，采用MVCC来支持高并发 
* 支持事务 
* 支持外键 
* 支持崩溃后的安全恢复 
* 不支持全文索引
MyISAM适合SELECT密集型的表，而InnoDB适合INSERT和UPDATE密集型的表
系统调优参数
可以使用下面几个工具来做基准测试：

sysbench：一个模块化，跨平台以及多线程的性能测试工具

iibench-mysql：基于 Java 的 MySQL/Percona/MariaDB 索引进行插入性能测试工具

tpcc-mysql：Percona开发的TPC-C测试工具




back_log：back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。可以从默认的50升至500

wait_timeout：数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的8小时减到半小时

max_user_connection: 最大连接数，默认为0无上限，最好设一个合理上限

thread_concurrency：并发线程数，设为CPU核数的两倍

skip_name_resolve：禁止对外部连接进行DNS解析，消除DNS解析时间，但需要所有远程主机用IP访问

key_buffer_size：索引块的缓存大小，增加会提升索引处理速度，对MyISAM表性能影响最大。对于内存4G左右，可设为256M或384M，通过查询show status like 'key_read%'，保证key_reads / key_read_requests在0.1%以下最好

innodb_buffer_pool_size：缓存数据块和索引块，对InnoDB表性能影响最大。通过查询show status like 'Innodb_buffer_pool_read%'，保证(Innodb_buffer_pool_read_requests – Innodb_buffer_pool_reads) / Innodb_buffer_pool_read_requests越高越好

innodb_additional_mem_pool_size：InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL会记录Warning信息到数据库的错误日志中，这时就需要该调整这个参数大小

innodb_log_buffer_size：InnoDB存储引擎的事务日志所使用的缓冲区，一般来说不建议超过32MB

query_cache_size：缓存MySQL中的ResultSet，也就是一条SQL语句执行的结果集，所以仅仅只能针对select语句。当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在Query Cache中的缓存数据失效。所以，当我们的数据变化非常频繁的情况下，使用Query Cache可能会得不偿失。根据命中率(Qcache_hits/(Qcache_hits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.
可以通过命令show status like 'Qcache_%'查看目前系统Query catch使用大小

read_buffer_size：MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能

sort_buffer_size：MySql执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。如果不能，可以尝试增加sort_buffer_size变量的大小

read_rnd_buffer_size：MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。

record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值

thread_cache_size：保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的

table_cache：类似于thread_cache_size，但用来缓存表文件，对InnoDB效果不大，主要用于MyISAM



服务层缓存:
* 直写式（Write Through）：在数据写入数据库后，同时更新缓存，维持数据库与缓存的一致性。这也是当前大多数应用缓存框架如Spring Cache的工作方式。这种实现非常简单，同步好，但效率一般。 
* 回写式（Write Back）：当有数据要写入数据库时，只会更新缓存，然后异步批量的将缓存数据同步到数据库上。这种实现比较复杂，需要较多的应用逻辑，同时可能会产生数据库与缓存的不同步，但效率非常高。
* 

表分区
分区表是一个独立的逻辑表，但是底层由多个物理子表组成，意味着索引也是按照分区的子表定义，没有全局索引



sql语句需要针对分区表做优化，SQL条件中要带上分区条件的列，从而使查询定位到少量的分区上否则会扫描全部分区

EXPLAIN PARTITIONS来查看某条SQL语句会落在那些分区上


分区的好处是：

可以让单表存储更多的数据

分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作

部分查询能够从查询条件确定只落在少数分区上，速度会很快

分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备

可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争

可以备份和恢复单个分区

分区的限制和缺点：

一个表最多只能有1024个分区

如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来

分区表无法使用外键约束

NULL值会使分区过滤无效

所有分区必须使用相同的存储引擎



分区的类型：

RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区

LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择

HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL中有效的、产生非负整数值的任何表达式

KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值
