mysql整个查询执行过程：
1.客户端向mysql服务器发送一条查询请求
2.服务器首先检查查询缓存，如果命中缓存则立刻返回存储在查询缓存中的结果，否则进入下一阶段
3.服务器进行sql解析、预处理、再由优化器生成对应执行计划
4.mysql根据执行计划，调用存储引擎的api来执行查询
5.返回结果，同时缓存查询结果


语法解析和预处理：
通过关键字将SQL语句进行解析，并生成一颗对应的解析树，解析器主要通过语法规则来验证和解析
预处理检查解析树是否合法（要查询的数据表和数据列是否存在等）


mysql客户端和服务器之间的通信协议是“半双公”：
客户端给服务器发送消息时，服务器不能给客户端发送消息，反之亦然，两个不能同时进行

客户端查询请求是用一个单独的数据包发送给服务器，查询语句过长需要设置（max_allowed_packet）



查询缓存：
1.两个查询在任何字符赏的不同（空格、注释），都会造成缓存不会命中
2.查询中包含任何用户自定义函数、存储函数、用户变量、临时表、mysql库中的系统表，查询结果都不会被缓存


查询缓存失效：
1.查询缓存系统会跟踪查询中涉及的每个表，如果这些表（数据或结构）发生变化，那么和这个表相关的缓存都将失效
2.任何写操作，必须将对应表的所有缓存都设置为失效，如果查询缓存非常大或者碎片很多，写操作就会带来很大的系统消耗，设置导致系统僵死一会儿
2.读操作也会对系统额外的消耗：1.任何查询语句在执行前都要经过检查，即使这条sql语句不会命中缓存
				2.如果查询结果可以被缓存，那么执行完成后，会将结果存入缓存，也会带来额外的系统消耗


数据库设计上的优化：
	多个小表代替一个大表，注意不要过度设计
	批量插入代替循环单条插入
	合理控制缓存大小，一般为几十兆
	SQL_CACHE和SQL_NO_CACHE控制查询语句是否需要缓存（query_cache_type设置为DEMAND）

建议：写密集型应用不轻易打开查询缓存

缓存如何使用内存？缓存如何控制内存碎片化

last_query_cost计算查询成本





Scheme设计与数据类型优化
1.数据类型遵循小而简单的原则（整型就比字符操作代价低）
通常来说把可为NULL的列改为NOT NULL不会对性能提升有多少帮助，只是如果计划在列上创建索引，就应该将该列设置为NOT NULL。
对整数类型指定宽度，比如INT(11)，没有任何卵用。INT使用32位（4个字节）存储空间，那么它的表示范围已经确定，所以INT(1)和INT(20)对于存储和计算是相同的。
UNSIGNED表示不允许负值，大致可以使正数的上限提高一倍。比如TINYINT存储范围是-128 ~ 127，而UNSIGNED TINYINT存储的范围却是0 - 255。
通常来讲，没有太大的必要使用DECIMAL数据类型。即使是在需要存储财务数据时，仍然可以使用BIGINT。比如需要精确到万分之一，那么可以将数据乘以一百万然后使用BIGINT存储。这样可以避免浮点数计算不准确和DECIMAL精确计算代价高的问题。
TIMESTAMP使用4个字节存储空间，DATETIME使用8个字节存储空间。因而，TIMESTAMP只能表示1970 - 2038年，比DATETIME表示的范围小得多，而且TIMESTAMP的值因时区不同而不同。
大多数情况下没有使用枚举类型的必要，其中一个缺点是枚举的字符串列表是固定的，添加和删除字符串（枚举选项）必须使用ALTER TABLE（如果只只是在列表末尾追加元素，不需要重建表）。
schema的列不要太多。原因是存储引擎的API工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码成各个列，这个转换过程的代价是非常高的。如果列太多而实际使用的列又很少的话，有可能会导致CPU占用过高。
大表ALTER TABLE非常耗时，MySQL执行大部分修改表结果操作的方法是用新的结构创建一个张空表，从旧表中查出所有的数据插入新表，然后再删除旧表。尤其当内存不足而表又很大，而且还有很大索引的情况下，耗时更久。当然有一些奇技淫巧可以解决这个问题，有兴趣可自行查阅。





索引相关的数据结构和算法：



